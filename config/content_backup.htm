<h1>About</h1>
<p><a href="https://github.com/mdecycu/cmsite"> https://github.com/mdecycu/cmsite </a></p>
<p></p>
<h1>Brython</h1>
<p><a href="https://en.wikipedia.org/wiki/Python_(programming_language)">https://en.wikipedia.org/wiki/Python_(programming_language)</a></p>
<h4>Examples:</h4>
<p style="padding-left: 30px;"><a href="https://gist.github.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d">https://gist.github.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d</a></p>
<p style="padding-left: 30px;"><a href="https://www.geeksforgeeks.org/python-programming-examples/">https://www.geeksforgeeks.org/python-programming-examples/</a></p>
<p style="padding-left: 30px;"><a href="https://www.programiz.com/python-programming/examples">https://www.programiz.com/python-programming/examples</a></p>
<p style="padding-left: 30px;"><a href="https://www.freecodecamp.org/news/python-code-examples-sample-script-coding-tutorial-for-beginners/">https://www.freecodecamp.org/news/python-code-examples-sample-script-coding-tutorial-for-beginners/</a></p>
<h4>Python Tutorial:</h4>
<p style="padding-left: 30px;"><a href="https://docs.python.org/3/tutorial/">https://docs.python.org/3/tutorial/</a></p>
<p style="padding-left: 30px;"><a href="https://docs.python.org/3/tutorial/introduction.html">An informal introduction to Python</a></p>
<h4>Indentation (Python 採 4 個 Spaces 縮排, 以界定執行範圍)</h4>
<h4>Variables (<a href="https://github.com/python/cpython/blob/3.11/Lib/keyword.py">Python Keywords</a>)</h4>
<h4>Comments (# 單行註解, 三個單引號或三個雙引號標註多行註解)</h4>
<h4><a href="https://docs.python.org/3/tutorial/introduction.html#numbers">Numbers</a> (整數 int(), 浮點數 float())</h4>
<h4><a href="https://docs.python.org/3/tutorial/introduction.html#strings">Strings</a> (字串)</h4>
<h4>print (Python 內建函式, <a href="https://docs.python.org/3/library/functions.html#print">print()</a> 函式)</h4>
<p><a href="https://docs.python.org/3/tutorial/controlflow.html">Python control flow tools</a></p>
<h4 style="padding-left: 30px;"><a href="https://docs.python.org/3/tutorial/controlflow.html#for-statements">for</a></h4>
<h4 style="padding-left: 30px;"><a href="https://docs.python.org/3/tutorial/controlflow.html#if-statements">if</a></h4>
<h4 style="padding-left: 30px;"><a href="https://docs.python.org/3/tutorial/controlflow.html#the-range-function">range</a></h4>
<h4>open</h4>
<h4>read</h4>
<h4><a href="https://docs.python.org/3/tutorial/introduction.html#lists">lists</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/datastructures.html#tuples-and-sequences">tuples</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/datastructures.html#dictionaries">dictionaries</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/controlflow.html#defining-functions">functions</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/errors.html#exceptions">try ... except</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/controlflow.html#break-and-continue-statements-and-else-clauses-on-loops">break</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/controlflow.html#pass-statements">pass</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/classes.html?highlight=classes">classes</a></h4>
<p>這個頁面 demo 如何在同一頁面下納入多個線上 Ace 編輯器與執行按鈕 (<a href="/downloads/practice_html.txt">practice_html.txt</a> 動態頁面超文件).</p>
<p><a href="/downloads/practice_html.txt">practice_html.txt</a> 動態頁面超文件應該可以在啟動 Brython 時, 設定將 .py 檔案放入 downloads/py 目錄中引用.</p>
<p>亦即將所有對應的 html 也使用 Brython 產生, 然後寫為 <a href="https://docs.python.org/3/tutorial/classes.html">class</a> 後, 在範例導入時透過 <a href="https://docs.python.org/3/tutorial/classes.html#instance-objects">instance</a> 引用.</p>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">&lt;!-- 啟動 Brython --&gt;
&lt;script&gt;
window.onload=function(){
brython({debug:1, pythonpath:['/static/','./../downloads/py/']});
}
&lt;/script&gt;</pre>
<p>從 1 累加到 100:</p>
<p><button id="add1to100">1 add to 100</button></p>
<p>將 iterable 與 iterator <a href="https://home.gamer.com.tw/creationDetail.php?sn=4337438">相關說明</a>, 利用 Brython 與 Ace Editor 整理在這個頁面.</p>
<!-- 導入 brython 程式庫 -->
<p>
<script src="/static/brython.js"></script>
<script src="/static/brython_stdlib.js"></script>
</p>
<!-- 啟動 Brython -->
<p>
<script>
window.onload=function(){
brython({debug:1, pythonpath:['/static/','./../downloads/py/']});
}
</script>
</p>
<p><!-- 導入 FileSaver 與 filereader --></p>
<p>
<script src="/static/ace/FileSaver.min.js" type="text/javascript"></script>
<script src="/static/ace/filereader.js" type="text/javascript"></script>
</p>
<p><!-- 導入 ace --></p>
<p>
<script src="/static/ace/ace.js" type="text/javascript"></script>
<script src="/static/ace/ext-language_tools.js" type="text/javascript"></script>
<script src="/static/ace/mode-python3.js" type="text/javascript"></script>
<script src="/static/ace/snippets/python.js" type="text/javascript"></script>
</p>
<p><!-- 導入 gearUtils-0.9.js Cango 齒輪繪圖程式庫 -->
<script src="/static/Cango-24v03-min.js"></script>
<script src="/static/gearUtils-09.js"></script>
<script src="/static/SVGpathUtils-6v03-min.js"></script>
<script src="/static/sylvester.js"></script>
<script src="/static/PrairieDraw.js"></script>
</p>
<p><!-- 請注意, 這裡使用 Javascript 將 localStorage["kw_py_src1"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱--></p>
<p>
<script type="text/javascript">
function doSave(storage_id, filename){
    var blob = new Blob([localStorage[storage_id]], {type: "text/plain;charset=utf-8"});
    filename = document.getElementById(filename).value
    saveAs(blob, filename+".py");
}
</script>
</p>
<p>
<script type="text/python3">
from browser import document as doc
import ace
# 清除畫布
def clear_bd1(ev):
    bd = doc["brython_div1"]
    bd.clear()
Ace1 = ace.Editor(editor_id="kw_editor1", console_id="kw_console1", container_id="kw__container1", storage_id="kw_py_src1" )
# 從 gist 取出程式碼後, 放入 editor 作為 default 程式
def run1():
    # 利用 get 取下 src 變數值
    try:
        url = doc.query["src"]
    except:
        url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c3a6deaf717f8f2739a4b1392a5ab10936e9693a/from_1_add_to_10_1.py"
    prog = open(url).read()

    # 將程式載入編輯區
    Ace1.editor.setValue(prog)
    Ace1.editor.scrollToRow(0)
    Ace1.editor.gotoLine(0)
    # 直接執行程式
    #ns = {'__name__':'__main__'}
    #exec(prog, ns)
    # 按下 run 按鈕
    Ace1.run()

# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定
doc['kw_run1'].bind('click', Ace1.run)
doc['kw_show_console1'].bind('click', Ace1.show_console)
doc['kw_clear_console1'].bind('click', Ace1.clear_console)
doc['clear_bd1'].bind('click', clear_bd1)
# 呼叫函式執行
run1()
</script>
</p>
<p><!-- add 1 to 100 開始 -->
<script type="text/python3">
from browser import document as doc
import ace

# 清除畫布
def clear_bd1(ev):
    bd = doc["brython_div1"]
    bd.clear()

# 利用 ace 中的 Editor 建立 Ace2 物件, 其中的輸入變數分別對應到頁面中的編輯區物件
Ace2 = ace.Editor(editor_id="kw_editor1", console_id="kw_console1", container_id="kw__container1", storage_id="kw_py_src1" )

add1to100_url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c48e37714f055c3a0027cbfef59e442a6ef659b9/from_1_add_to_100_1.py"

# 從 gist 取得程式碼
add_src = open(add1to100_url).read()
def add(ev):
    Ace2.editor.setValue(add_src)
    Ace2.editor.scrollToRow(0)
    Ace2.editor.gotoLine(0)
    Ace2.run()

# id 為 "add1to100" 的按鈕點按時, 執行 add 方法
doc["add1to100"].bind('click', add)
</script>
</p>
<p><!-- add 1 to 100 結束--></p>
<!-- editor1 開始 -->
<p><!-- 用來顯示程式碼的 editor 區域 --></p>
<div id="kw_editor1" style="width: 600px; height: 300px;"></div>
<p><!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --></p>
<p><!-- 存擋表單開始 --></p>
<form><label>Filename: <input id="kw_filename" placeholder="input file name" type="text"/>.py</label> <input onclick="doSave('kw_py_src1', 'kw_filename1');" type="submit" value="Save"/></form>
<p><!-- 存擋表單結束 --></p>
<p></p>
<p><!-- 執行與清除按鈕開始 --></p>
<p><button id="kw_run1">Run</button> <button id="kw_show_console1">Output</button> <button id="kw_clear_console1">清除輸出區</button><button id="clear_bd1">清除繪圖區</button><button onclick="window.location.reload()">Reload</button></p>
<p><!-- 執行與清除按鈕結束 --></p>
<p></p>
<p><!-- 程式執行 ouput 區 --></p>
<div style="width: 100%; height: 100%;"><textarea autocomplete="off" id="kw_console1"></textarea></div>
<p><!-- Brython 程式執行的結果, 都以 brython_div1 作為切入位置 --></p>
<div id="brython_div1"></div>
<!-- editor1 結束 --><hr/><!-- ########################################## -->
<p>從 1 累加到 100 part2:</p>
<p><button id="add1to100part2">1 add to 100</button><button id="cango_three_gears">cango_three_gears</button><button id="bsnake">BSnake</button><button id="aitetris">AI Tetris</button><button id="threejsblock">Rotating Block</button></p>
<p><!-- 請注意, 這裡使用 Javascript 將 localStorage["kw_py_src2"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱--></p>
<p>
<script type="text/python3">
from browser import document as doc
import ace
# 清除畫布
def clear_bd2(ev):
    bd = doc["brython_div2"]
    bd.clear()
Ace3 = ace.Editor(editor_id="kw_editor2", console_id="kw_console2", container_id="kw__container2", storage_id="kw_py_src2" )
# 從 gist 取出程式碼後, 放入 editor 作為 default 程式
def run2():
    # 利用 get 取下 src 變數值
    try:
        url = doc.query["src2"]
    except:
        url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c3a6deaf717f8f2739a4b1392a5ab10936e9693a/from_1_add_to_10_1.py"
    prog = open(url).read()

    # 將程式載入編輯區
    Ace3.editor.setValue(prog)
    Ace3.editor.scrollToRow(0)
    Ace3.editor.gotoLine(0)
    # 直接執行程式
    #ns = {'__name__':'__main__'}
    #exec(prog, ns)
    # 按下 run 按鈕
    Ace3.run()

# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定
doc['kw_run2'].bind('click', Ace3.run)
doc['kw_show_console2'].bind('click', Ace3.show_console)
doc['kw_clear_console2'].bind('click', Ace3.clear_console)
doc['clear_bd2'].bind('click', clear_bd2)
# 呼叫函式執行
run2()
</script>
</p>
<p><!-- add 1 to 100 part2 開始 -->
<script type="text/python3">
from browser import document as doc
import ace

# 清除畫布
def clear_bd2(ev):
    bd = doc["brython_div2"]
    bd.clear()

# 利用 ace 中的 Editor 建立 Ace2 物件, 其中的輸入變數分別對應到頁面中的編輯區物件
Ace4 = ace.Editor(editor_id="kw_editor2", console_id="kw_console2", container_id="kw__container2", storage_id="kw_py_src2" )

# 透過 Ace4 以類別建立一個通用的 button2, 可以在多個案例中將 gist 程導入編輯區

class button2:
    def __init__(self, url):
        self.url = url

    # 記得加入 event 輸入變數
    def do(self,ev):
        Ace4.editor.setValue(open(self.url).read())
        Ace4.editor.scrollToRow(0)
        Ace4.editor.gotoLine(0)
        Ace4.run()

add1to100_url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c48e37714f055c3a0027cbfef59e442a6ef659b9/from_1_add_to_100_1.py"

# 從 gist 取得程式碼
add_src = open(add1to100_url).read()
def add2(ev):
    Ace4.editor.setValue(add_src)
    Ace4.editor.scrollToRow(0)
    Ace4.editor.gotoLine(0)
    Ace4.run()

# id 為 "add1to100part2" 的按鈕點按時, 執行 add 方法
doc["add1to100part2"].bind('click', add2)
# 以下為運用 button2 class 的通用 gist 程式導入區
################################## cango_three_gears start
cango_three_gears_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/cango_three_gears_brython_div2.py"
cango_three_gears = button2(cango_three_gears_url)
doc["cango_three_gears"].bind("click", cango_three_gears.do)
################################## cango_three_gears end
################################## bsnake start
bsnake_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/kmol_snakey.py"
bsnake = button2(bsnake_url)
doc["bsnake"].bind("click", bsnake.do)
################################## bsnake end
################################## aitetris start
aitetris_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/pygame_to_brython_tetris_ai.py"
aitetris = button2(aitetris_url)
doc["aitetris"].bind("click", aitetris.do)
################################## aitetris end
################################## threejsblock start
threejsblock_url = "https://gist.githubusercontent.com/mdecycu/2c6323eff49b496d1bafd210f3ec9707/raw/df37802f9e8a386b6424f7945af622b1cd0a9ca5/threejs_rotating_block.py"
threejsblock = button2(threejsblock_url)
doc["threejsblock"].bind("click", threejsblock.do)
################################## threejsblock end
</script>
</p>
<p><!-- add 1 to 100 part2 結束--></p>
<!-- editor2 開始 -->
<p><!-- 用來顯示程式碼的 editor 區域 --></p>
<div id="kw_editor2" style="width: 600px; height: 300px;"></div>
<p><!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --></p>
<p><!-- 存擋表單開始 --></p>
<form><label>Filename: <input id="kw_filename2" placeholder="input file name" type="text"/>.py</label> <input onclick="doSave('kw_py_src2', 'kw_filename2');" type="submit" value="Save"/></form>
<p><!-- 存擋表單結束 --></p>
<p></p>
<p><!-- 執行與清除按鈕開始 --></p>
<p><button id="kw_run2">Run</button> <button id="kw_show_console2">Output</button> <button id="kw_clear_console2">清除輸出區</button><button id="clear_bd2">清除繪圖區</button><button onclick="window.location.reload()">Reload</button></p>
<p><!-- 執行與清除按鈕結束 --></p>
<p></p>
<p><!-- 程式執行 ouput 區 --></p>
<div style="width: 100%; height: 100%;"><textarea autocomplete="off" id="kw_console2"></textarea></div>
<div style="width: 100%; height: 100%;"></div>
<h1>課程內容</h1>
<p>本支線用於整理每堂課之所學，並將實作之問題和心得彙整於此。</p>
<h2>w9</h2>
<p>利用各種不同軟體製作磁浮球。</p>
<p><a href="https://docs.google.com/presentation/d/12R75gTTJjP3N5Gu6d2h44dBi0njXH5Wt/edit?usp=sharing&amp;ouid=115732666071086231386&amp;rtpof=true&amp;sd=true" title="PPT">PPT</a></p>
<h2>w10</h2>
<p>   本周以Git clone的指令將倉儲取下。</p>
<p>由於replit的容量不堪使用，老師教我們用指令取出cad2023 :</p>
<p><span>    git clone --recurse-submodules </span><a href="mailto:git@github.com">git@github.com</a><span>:帳號/cad2023.git</span></p>
<p>取下後還需在Putty設定Session</p>
<p>設定完後以CMD執行cms</p>
<p>進入網頁https:localhost:9445即可進行網頁維護。</p>
<h2>w11</h2>
<p>本周解決了無法Git push的問題。</p>
<p>上周在Acp時出現了unable to open connection的問題</p>
<p>也有動態網站Acp無法作動之情形發生。</p>
<p>了解後發現是session沒有設定好，Acp也改以CMD執行。</p>
<p>在詢問ChatGPT後，整理出下列指令</p>
<p>    git add .  →  git commit -m"title" →  git push</p>
<p>執行完後即完成Acp。</p>
<h2>w12</h2>
<p>   本周以ChatGPT瞭解AI之利與弊。</p>
<p>老師以座位之問題為基礎，要求ChatGPT解決 : </p>
<p>    問題一 : <span>利用 Python 讀取下列檔案名稱為 2b_w12_seat.txt "2b stud num    seat</span></p>
<p>最後由ChatGPT之回覆可知，ChatGPT可以讀取程式，但是少了排序資料的程序。</p>
<p>    再來老師要求ChatGPT以Brython語言改寫座位程式</p>
<p>結果ChatGPT以JavaScript和Brython進行混用，由於非課程所需，故不採用。</p>
<p>    在看過老師操作ChatGPT以及個人操作經驗後，我認為ChatGPT由於資料庫龐大，故給出的答案可能混雜過多不必要的變數。</p>
<p>   所以在詢問ChatGPT之前，若能給予更多條件或限制，將變數盡可能地減少，給出的答覆可能會更理想。</p>
<h2>w13</h2>
<p>本周排除了git push的問題。</p>
<p>這周再進行git push時發生下列情況 : </p>
<p>  <span>! [rejected] main -&gt; main (non-fast-forward) error: failed to push some refs to 'cad2023:leekuchu006/cad2023.git'</span></p>
<p>經過詢問ChatGPT後試了很多方法，包括rebase、git pull origin main、fast forward only等等</p>
<p>最後發現問題是線上版本的<span>內容比電腦裡這份還要新，所以Git拒絕推送</span></p>
<p>我就利用了 <code>git push -f 進行強制推送</code></p>
<p><span face="monospace" style="font-family: monospace;">Git就將我的版本強制更新上去了</span></p>
<p><span face="monospace" style="font-family: monospace;">但這個指令在進行協同作業時，會將對方的進度直接蓋掉，要避免使用。</span></p>
<h2>w14</h2>
<p><span face="monospace" style="font-family: monospace;"></span>  本周是小考周</p>
<p>老師以平面鋼球永動模擬器為題讓我們進行考試，考試過程我發現自己只能做完繪圖的部分，後面的機構設計、<span>CoppeliaSim 轉換等等我都沒辦法操作，要反覆看老師的影片來複習或是詢問同學。</span></p>
<p><span>在繪圖過程中遇到了軌道曲面的問題，反覆思考如何讓軌道產生曲面輪廓，最後順利地以除料的方式產生出了曲面的軌道。</span></p>
<h1>Exam</h1>
<p>  利用Onshape製作彈珠永動機 </p>
<p>一開始遇到軌道曲面的問題，最後利用在前視圖繪製三角形來模擬出軌道之曲面，最後成品如下。</p>
<p><img alt="永動機" height="240" src="/images/圖片" width="509"/></p>
<p>將鋼球和軌道模型匯入並</p>
<h1>倉儲評分項目</h1>
<p>期末將至，本支線用於彙整老師所要求之評分項目，本人將盡力完成老師所要求之一切項目。</p>
<p></p>
<h2>B項目</h2>
<p><span>根據 </span><span>IPv4 與 IPv6</span><span><span> </span>網路環境設定進行作法討論。</span></p>
<p><span>若IPv6設定為自動取得IP和DNS，必須要有代理主機才能夠連接只支援IPv4之網站，故需要設定Proxy來設定代理主機。</span></p>
<p>例如:</p>
<p>[2001:288:6004:17::4]:3128</p>
<p><span>[2001:288:6004:17::42]:3128</span></p>
<p><span>[2001:288:6004:17::53]:3128</span></p>
<p><span>[2001:288:6004:17::69]:3128</span></p>
<p><span>不一定每條IP皆為通路，需多方嘗試，網速也不盡相同。</span></p>
<p><span>而Proxy應變更為手動設定，須將自動偵測關閉。</span></p>
<h2>D項目</h2>
<p><span>就所分配的 </span><span>CAD 套件</span><span>從安裝設定到繪圖提供內容參考。</span></p>
<p><span></span>NX可攜式環境下載如下。</p>
<p><img alt="NX" height="115" src="/images/NX 下載" width="324"/></p>
<p><span></span></p>
<p><span></span>磁浮球模型繪圖。</p>
<p>在繪圖過程中，最頭痛的地方就是軌道尾部的圓弧，如何找到合適的角度，使鋼球能順利進行反覆運動。</p>
<p></p>
<h2>E項目</h2>
<p><span>使用所分配的 CAD 套件完成</span><span>專案一零組件繪圖</span><span>, 並提供零組件下載。</span></p>
<h2>F項目</h2>
<p>將自行繪製的專案一零組件轉入 CoppeliaSim。</p>
<p>將繪製好的模型導入<span>CoppeliaSim。</span></p>
<p><span><img alt="" height="428" src="/images/磁浮球" width="800"/></span></p>
<p></p>
<h2>G項目</h2>
<p><span>利用 </span><span>ZMQ Remote API Python</span><span><span> </span>對專案一轉入的零組件設定感測器, 並進行</span><span>鋼球永動模擬。</span></p>
<p>設定好起始點座標及Force。</p>
<p><img alt="123" height="320" src="/images/對這就是你寫的" width="248"/></p>
<p>加入感測器後進行模擬</p>
<p>模擬成果。</p>
<p><img alt="" height="247" src="/images/磁浮GIF" width="471"/></p>
<h2>H項目</h2>
<p><span>實際操作 </span><span>Triangle 軌道系統</span><span>的鋼球永動</span><span>模擬。</span></p>
<p>利用Solvespace開啟Triangle軌道。</p>
<p><img alt="" height="427" src="/images/solvespace" width="800"/></p>
<p>將檔案以stl檔匯出</p>
<p>確認沒有問題後以CoppeliaSim啟動。</p>
<p><img alt="" height="428" src="/images/coppelasim" width="800"/></p>
<p>下面為失敗之範例，需更改Censor之Force將力道減小。</p>
<p><img alt="GIF" height="418" src="/images/GIFFFF" width="796"/></p>
<p>下面為最後成果。</p>
<p><img alt="GIF" height="417" src="/images/GIF!!" width="794"/></p>
<h2>I項目</h2>
<p><span>完成 W15 的平面雙 U 迴路上的</span><span>鋼球永動系統繪圖、轉檔與系統模擬。</span></p>
<p>以OnShape繪製雙U迴路模型。</p>
<p><img alt="雙U" height="377" src="/images/圖片" width="800"/></p>
<p><span></span>以stl檔匯出，注意STL格式必須為二進位。</p>
<p>接著以CoppeliaSim啟動。</p>
<p><img alt="" height="430" src="/images/雙u COPPE" width="800"/></p>
<h2>J項目</h2>
<p><span>使用所分配的 CAD 套件完成</span><span>專案二 1D 平台零組件繪圖</span><span>, 並提供零組件下載。</span></p>
<p>利用OnShape繪製專案二之平台零組件。<br/>軌道繪製圖如下。</p>
<p><img alt="軌道" height="398" src="/images/側蓋" width="800"/></p>
<p>下卡榫之側蓋。</p>
<p><img alt="下卡點" height="400" src="/images/下卡榫" width="800"/></p>
<p>下方支架和銷子。<br/><img alt="下支架" height="385" src="/images/下面支架" width="800"/></p>
<p>底座。</p>
<p><img alt="底座" height="388" src="/images/底座" width="800"/></p>
<p><a href="https://drive.google.com/drive/folders/17TMIeet1l1nFNWb3VJ5f9qtnGB-shvXi?usp=sharing" title="檔案下載">零組件檔案下載。</a></p>
<h2>K項目</h2>
<p><span>利用 </span><span>ZMQ Remote API Python</span><span><span> </span>對專案二轉入的零組件設定感測器, 並進行鋼球永動模擬。</span></p>
<p><span></span></p>
<p><span></span></p>
<!-- editor2 結束 -->
<p>
<script src="https://unpkg.com/three@0.144.0/build/three.js" type="text/javascript"></script>
</p>
<p></p>